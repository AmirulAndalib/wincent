# For documentation, see: /usr/local/etc/offlineimap.conf

[general]

accounts = Home
ui = TTYUI
pythonfile = ~/.mutt/offlineimap.py
fsync = false

[mbnames]

# We have offlineimap record the mailbox names into a file that mutt can source.
# This gives us explicit control over the ordering in the sidebar.
enabled = yes
filename = ~/.mutt/config/mailboxes.mutt
header = "mailboxes "
peritem = "+%(accountname)s/%(foldername)s"

# Sort important folders up the top, and everything else by account/foldername.
sort_keyfunc = lambda d: (d['accountname'],
                          {'Home': '00',
                           'Home.Starred': '01',
                           'Home.Sent': '02',
                           'Home.Drafts': '03',
                           'Home.Archive': '04',
                           'Home.Trash': '05',
                           'Home.Spam': '06',
                           'Work': '00',
                           'Work.Sent': '02',
                           'Work.Drafts': '03',
                           'Work.Archive': '04',
                           'Work.Trash': '05',
                           'Work.Spam': '06',
                           }.get(d['foldername'], '99'), d['foldername'])

# For now I don't have any that I want to exclude, but can do that later:
# folderfilter = lambda accountname, foldername: not re.search('(^bak.*|.*drafts$|.*spam$|.*sent$|.*trash$)', foldername)

sep = " "
footer = "\n"
incremental = no

[Account Home]

localrepository = Home-Local
remoterepository = Home-Remote
postsynchook = notmuch new
status_backend = sqlite

[Repository Home-Local]

type = GmailMaildir
localfolders = ~/.mail/Home

nametrans = lambda folder: {'Home':                   'INBOX',
                            'Home.Drafts':            '[Gmail]/Drafts',
                            'Home.Sent':              '[Gmail]/Sent Mail',
                            'Home.Spam':              '[Gmail]/Spam',
                            'Home.Starred':           '[Gmail]/Starred',
                            'Home.Trash':             '[Gmail]/Trash',
                            'Home.Archive':           '[Gmail]/All Mail',
                            }.get(folder) or re.sub('^Home\.', '', folder)

[Repository Home-Remote]

type = Gmail
remotepasseval = get_keychain_pass(account="greg+mutt@hurrell.net", server="imap.gmail.com")
sslcacertfile = /usr/local/etc/openssl/cert.pem
remoteuser = greg@hurrell.net
maxconnections = 1
realdelete = no

# Skip XOAUTH2 because I haven't bothered to configure it, which makes it print
# a noisy error.
auth_mechanisms = GSSAPI, CRAM-MD5, PLAIN, LOGIN

nametrans = lambda folder: {'INBOX':             'Home',
                            '[Gmail]/Drafts':    'Home.Drafts',
                            '[Gmail]/Sent Mail': 'Home.Sent',
                            '[Gmail]/Starred':   'Home.Starred',
                            '[Gmail]/Spam':      'Home.Spam',
                            '[Gmail]/Trash':     'Home.Trash',
                            '[Gmail]/All Mail':  'Home.Archive',
                            }.get(folder) or re.sub('/', '.', 'Home.' + folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Important']
