# Set prefix to space.
unbind-key C-b
set-option -g prefix C-Space

# Bindings:
# - to see current bindings:
#   tmux list-keys

# Intuitive window-splitting keys.
bind-key | split-window -h -c '#{pane_current_path}' # normally prefix-%
bind-key '\' split-window -h -c '#{pane_current_path}' # normally prefix-%
bind-key - split-window -v -c '#{pane_current_path}' # normally prefix-"

# Open split panes with the path of the current pane.
unbind-key %
bind-key % split-window -h -c '#{pane_current_path}'
unbind-key '"'
bind-key '"' split-window -v -c '#{pane_current_path}'

# Same for new windows.
unbind-key c
bind-key c new-window -c '#{pane_current_path}'

# Vim-like key bindings for pane navigation (default uses cursor keys).
unbind-key h
bind-key h select-pane -L
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key l # normally used for last-window
bind-key l select-pane -R

# Resizing (mouse also works).
# Here, and in other binds, `-r` allows us to repeat without having to hit the
# prefix (with repeat-time, which defaults to 500ms).
unbind-key Left
bind-key -r Left resize-pane -L 5
unbind-key Right
bind-key -r Right resize-pane -R 5
unbind-key Down
bind-key -r Down resize-pane -D 5
unbind-key Up
bind-key -r Up resize-pane -U 5

# Fast toggle between current and last-used window (normally prefix-l).
bind-key ^space last-window

# `^space ^space` is awfully close to the destructive `^space space`, which
# trashes the layout. Provide a quick way to get back to the previous-used
# layout.
#
# prefix-p is normally used for previous-window, but I never use that,
# prefering numeric access or the fast toggle above (prefix-^space).
bind-key p select-layout -o

bind-key -r '<' swap-window -d -t '{previous}' # Move window left.
bind-key -r '>' swap-window -d -t '{next}' # Move window right.

# Status bar.
set-option -g status-left-length 40
set-option -g status-left '#[fg=yellow,bold,italics]#S § ' # SECTION SIGN (UTF-8: c2 a7)
set-option -g status-right "#[fg=yellow,bold,italics]$USER@#h #[fg=magenta]%l:%M %p"
set-option -g status-interval 60 # Default is 15.

# Automatically renumber window numbers on closing a pane (tmux >= 1.7).
set-option -g renumber-windows on

# Make widths constant with or without flags.
set-option -w -g window-status-current-format '#[reverse] #I:#W#F '

set-option -w -g window-status-format ' #I:#W#{?#{==:#F,},  ,#F }'

set-option -w -g xterm-keys on

# Mouse can be used to select panes, select windows (by clicking on the status
# bar), resize panes. For default bindings see `tmux list-keys`.
set-option -g mouse on

# Stay in copy mode on drag end.
# (Would use `bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X
# stop-selection` but it is a bit glitchy.)
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Scroll 3 lines at a time instead of default 5; don't extend dragged selections.
bind-key -T copy-mode-vi WheelUpPane {
  select-pane
  send-keys -t'{mouse}' -X clear-selection
  send-keys -t'{mouse}' -X -N 3 scroll-up
}
bind-key -T copy-mode-vi WheelDownPane {
  select-pane
  send-keys -t'{mouse}' -X clear-selection
  send-keys -t'{mouse}' -X -N 3 scroll-down
}

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
bind-key -T root DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-word
  }
bind-key -T root TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-line
  }

# Don't exit copy mode on double or triple click.
bind-key -T copy-mode-vi DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-word
  }
bind-key -T copy-mode-vi TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-line
  }

# For other ways of getting into copy-mode, ensure we pass -H to suppress the
# top-right indicator. (These are the same as the default bindings, apart from
# the addition of the -H.)
#
# Not tackled here: MouseDown3Pane and M-MouseDown3Pane, which have massive and
# complicated definitions for creating context menus.
bind-key [ copy-mode -H
bind-key PPage copy-mode -u -H
bind-key -T root MouseDrag1Pane if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send-keys -M
} {
  copy-mode -M -H
}
bind-key -T root WheelUpPane if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send-keys -M
} {
  copy-mode -e -H
}

# For those times when C-c and q are not enough.
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Slightly more useful width in "main-vertical" layout; enough room for 3-digit
# line number gutter in Vim + 80 columns of text + 1 column breathing room
# (default looks to be about 79).
set-option -w -g main-pane-width 85

set-option -g default-terminal "tmux-256color"
set-option -sa terminal-features ',xterm-kitty:RGB'
set-option -ga terminal-overrides ',xterm-256color:Tc'
set-option -ga terminal-overrides ',xterm-kitty:Tc'

set-option -g history-limit 10000

# Start window and pane numbering at 1, (0 is too hard to reach).
set-option -g base-index 1
set-option -g pane-base-index 1

set-option -g pane-border-lines heavy
set-option -g pane-border-status bottom

# Show copy mode info in pane border, and suppress it (elsewhere) by setting our
# bindings to use the `-H` switch to the `copy-mode` command.
#
# Note that we show position as offset from top of history to make it less
# confusing (tmux usually shows offset from bottom).
#
# - #{?condition,consequent,else} is ternary syntax.
# - #{==:#{pane_mode},copy-mode} is our condition (equals 1 when `pane_mode` is
#   "copy-mode").
# - #{e|-|:x,y} does our arithmetic, `history_size` - `scroll_position`.
# - #, is used to escape one of the commas inside the "consequent" format of
#   the ternary syntax (without this, the format breaks); funnily enough,
#   escaping is _not_ needing in the "else" format (and including it breaks the
#   format).
#
# In the future, if we get a `search_count` format, we'll be able to replicate
# the results count in the default copy-mode indicator provided by tmux; see:
#
# - https://github.com/tmux/tmux/issues/4091
#
# Likewise, if we get a format that would allow us to know when a search is
# active, we could show a Neovim-style indicator in the middle:
#
#   #[fg=red,align=centre]"Pattern not found: #{pane_search_string}#[default]"
#
# We can't do that right now because `pane_search_string` is set even in the
# absence of a search, `search_match` is true only if the cursor is on a match,
# and `search_present` will tell us if there is a match anywhere but that's not
# useful if we don't know that a search is active.
set-option -g pane-border-format "#{?#{==:#{pane_mode},copy-mode},#[fg=green#,align=left]  -- COPY --  #[default]#[align=right]  [#{e|-|:#{history_size},#{scroll_position}}/#{history_size}]  ,}"

# Don't wait for an escape sequence after seeing C-Space.
set-option -s escape-time 0

# Dynamically update tab and window titles.
set-option -g set-titles on

# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
set-option -g focus-events on

# But don't change tmux's own window titles.
set-option -w -g automatic-rename off

# - #S = session name
# - #T = pane title (~/.zshrc sets this to the last/current command)
set-option -g set-titles-string "#S • #T"

# Add : to the default list (" -_@") of word separators.
set-option -ga word-separators :/

# Make base16-shell work by turning passthrough of escape sequences.
# (Needed on tmux 3.3 and later).
set-option -g allow-passthrough all

# Make sure we always start at 1, even when invoked from a .tmux wrapper script.
set-environment -g SHLVL 1

# Clipper.
bind-key y run-shell "tmux save-buffer - | clip"

# "copy-pipe" requires tmux >= 1.8
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "clip"

# Search back to last prompt (mnemonic: "[b]ack") or next prompt (mnemonic: "[f]orwards")
bind-key b {
  copy-mode -H
  send-keys -X start-of-line
  send-keys -X search-backward "❯"
  send-keys -X cursor-right
  send-keys -X cursor-right
}
bind-key -T copy-mode-vi -r b {
  send-keys -X start-of-line
  send-keys -X search-backward "❯"
  send-keys -X cursor-right
  send-keys -X cursor-right
}
bind-key f {
  copy-mode -H
  send-keys -X end-of-line
  send-keys -X search-forward "❯"
  send-keys -X cursor-right
  send-keys -X cursor-right
}
bind-key -T copy-mode-vi -r f {
  send-keys -X end-of-line
  send-keys -X search-forward "❯"
  send-keys -X cursor-right
  send-keys -X cursor-right
}

# Turn on incremental search in vi mode (it's already the default in emacs mode).
bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
  send-keys -X search-forward-incremental "%%"
}
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
  send-keys -X search-backward-incremental "%%"
}

# Make "/" and "?" work without going into copy mode first.
bind-key / {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
    send-keys -X search-forward-incremental "%%"
  }
}
bind-key ? {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
    send-keys -X search-backward-incremental "%%"
  }
}

# Analagous with naked C-l which resets/clears the terminal.
bind-key C-l clear-history

# Defaults that will get overwritten by Base16:
set-option -g status-style 'bg=#373b41,fg=white,bold,italics'
set-option -g window-status-bell-style fg=yellow,bold,underscore
set-option -ga pane-active-border-style bg=default,fg=default
set-option -w -g window-status-current-style bg=red

source-file -q ~/.config/tmux/theme.conf
source-file -q ~/.config/tmux/colors.conf
source-file -q ~/.config/tmux/local.conf
