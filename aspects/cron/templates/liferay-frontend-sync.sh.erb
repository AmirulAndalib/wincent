#!/bin/sh

# <%= variables.figManaged %>

set -e

# Use homebrew-installed Git (for protocol.version = 2).
GIT=/usr/local/bin/git

DEBUG_FILE="$HOME/Library/Cron/.liferay-frontend-sync.debug"
LOCAL_REPO="$HOME/code/portal-frontend/liferay-portal"
LOCK_FILE="$HOME/Library/Cron/.liferay-frontend-sync.lock"
LOG_FILE="$HOME/Library/Cron/.liferay-frontend-sync.log"
REMOTE_REPO="git@github.com:liferay-frontend/liferay-portal.git"
UPSTREAM_REPO="https://github.com/liferay/liferay-portal"

log() {
  echo "`date '+%Y-%m-%d %H:%M:%S'` $*" >> "$LOG_FILE"
}

if [ -e "$LOCK_FILE" ]; then
  log 'lock file exists, exiting'
  exit
fi

trap "rm -f \"$LOCK_FILE\"; log 'exiting due to trap'; exit" EXIT SIGINT SIGTERM

touch "$LOCK_FILE"

export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519_frontend -F /dev/null"

# For debuggability: redirect stdout and stderr to file just for current run.
exec > "$DEBUG_FILE"
exec 2>&1

BASE="$(dirname $LOCAL_REPO)"

if [ ! -d "$BASE" ]; then
  mkdir -p "$BASE"
  log "created $BASE"
fi

if [ ! -d "$LOCAL_REPO" ]; then
  $GIT clone "$REMOTE_REPO" "$LOCAL_REPO"
  $GIT -C "$LOCAL_REPO" remote add upstream "$UPSTREAM_REPO"
  log "cloned $REMOTE_REPO to $LOCAL_REPO"
fi

$GIT -C "$LOCAL_REPO" remote update --prune

if $GIT -C "$LOCAL_REPO" diff --quiet upstream/master origin/master; then
  log 'remote is up-to-date'
else
  $GIT -C "$LOCAL_REPO" push origin +upstream/master:master
  log "updated remote $($GIT rev-parse --short upstream/master)"
fi

rm -f "$LOCK_FILE"
trap - EXIT SIGINT SIGTERM
